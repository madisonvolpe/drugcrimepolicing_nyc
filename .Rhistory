soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_where('borough = RICHMOND / Staten Island') %>%
as.character()
library(tidyverse)
soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_where('borough = RICHMOND / Staten Island') %>%
as.character()
library(RSocrata)
url <- "https://data.cityofnewyork.us/resource/66ae-7zpy.json?$where=starts_with(borough, 'RICHMOND')"
soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_where('borough = RICHMOND / Staten Island') %>%
as.character()
?soql_where
as.character()
soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
as.character()
url <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
as.character()
?read.socrata
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
as.character()
earthquakesDataFrame <- read.socrata(url = surl, app_token = token)
token <- "kQZdHWZoaGCuyRTdOGcpm9hqs"
earthquakesDataFrame <- read.socrata(url = surl, app_token = token)
ems <- read.socrata(url = surl, app_token = token)
?fromJSON
library(jsonlite)
req <- httr::GET(surl, httr::add_headers(Authorization = token))
json <- httr::content(req, as = "text")
fromJSON(json)
rm(list=ls())
library(soql)
library(jsonlite)
library(tidyverse)
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
as.character()
library(RSocrata)
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
as.character()
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
as.character()
token <- "kQZdHWZoaGCuyRTdOGcpm9hqs"
validateUrl(url = surl, app_token = token)
url<-validateUrl(url = surl, app_token = token)
fromJSON(url)
# FROM API get data, converts to df
ems <-fromJSON(url)
View(ems)
url
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND/STATEN ISLAND") %>%
as.character()
# API token
token <- "kQZdHWZoaGCuyRTdOGcpm9hqs"
# Add API Token to URL
url <-validateUrl(url = surl, app_token = token)
# FROM API get data, converts to df
ems2 <-fromJSON(url)
# EMS Incident Dispatch Data
# FROM: https://dev.socrata.com/foundry/data.cityofnewyork.us/66ae-7zpy
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
as.character()
# API token
token <- "kQZdHWZoaGCuyRTdOGcpm9hqs"
# Add API Token to URL
url <-validateUrl(url = surl, app_token = token)
# FROM API get data, converts to df
ems <-fromJSON(url)
>validateUrl()
>validateUrl()
?validateUrl()
soql::soql_offset()
?soql::soql_offset()
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
soql_offset(1000) %>%
as.character()
surl
# EMS Incident Dispatch Data
# FROM: https://dev.socrata.com/foundry/data.cityofnewyork.us/66ae-7zpy
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
soql_offset(1000) %>%
as.character()
# API token
token <- "kQZdHWZoaGCuyRTdOGcpm9hqs"
# Add API Token to URL
url <-validateUrl(url = surl, app_token = token)
url
# FROM API get data, converts to df
ems <-fromJSON(url)
View(ems)
View(ems)
?soql_limit
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
sql_limit(1000)%>%
soql_offset() %>%
as.character()
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
soql_limit(1000)%>%
soql_offset() %>%
as.character()
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
soql_limit(1000)%>%
#soql_offset() %>%
as.character()
# API token
token <- "kQZdHWZoaGCuyRTdOGcpm9hqs"
# Add API Token to URL
url <-validateUrl(url = surl, app_token = token)
# FROM API get data, converts to df
ems <-fromJSON(url)
View(ems)
surl
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
soql_limit(1000)%>%
soql_offset(1000) %>%
as.character()
# FROM API get data, converts to df
ems2 <-fromJSON(url)
# soql query to only get Staten Island entries
surl <- soql() %>%
soql_add_endpoint('https://data.cityofnewyork.us/resource/66ae-7zpy.json') %>%
soql_simple_filter("borough", "RICHMOND / STATEN ISLAND") %>%
soql_limit(1000)%>%
soql_offset(1000) %>%
as.character()
# API token
token <- "kQZdHWZoaGCuyRTdOGcpm9hqs"
# Add API Token to URL
url <-validateUrl(url = surl, app_token = token)
# FROM API get data, converts to df
ems2 <-fromJSON(url)
ems == ems2
url
surl
351448/1000
library(soql)
library(jsonlite)
library(tidyverse)
library(RSocrata)
rm(ems)
rm(ems2)
ems <-read.csv("ems_original.csv")
ems$X
ems[1]
ems <- ems [-1]
# CLEANING
str(ems)
#see if incident id is completely unique
length(unique(ems$cad_incident_id)) == nrow(ems) # each incident is truly unique
# create function
cleandt <- function(x){
x <- stringr::str_replace_all(string = x, pattern = 'T', replacement = " ")
x <- lubridate::ymd_hms(x)
return(x)
}
# upload
ems <- read.csv("data/ems_original.csv")
ems <- ems[-1]
# CLEANING
str(ems)
#change borough to SI
ems$borough <- as.character(ems$borough)
ems$borough <- "SI"
str(ems)
#see if incident id is completely unique
length(unique(ems$cad_incident_id)) == nrow(ems) # each incident is truly unique
# create function
cleandt <- function(x){
x <- stringr::str_replace_all(string = x, pattern = 'T', replacement = " ")
x <- lubridate::ymd_hms(x)
return(x)
}
emsbackup <- emsbackup
emsbackup <- ems
ems %>%
mutate_at(vars(ends_with("datetime")), funs(cleandt))
?list
ems %>%
mutate_at(vars(ends_with("datetime")), list(cleandt))
ems <- ems %>%
mutate_at(vars(ends_with("datetime")), list(cleandt))
str(ems)
str(ems)
# check incident range
range(ems$incident_datetime)
# initial call type
ems$initial_call_type
# initial call type
str(ems$initial_call_type)
# initial call type
unique(ems$initial_call_type)
# initial call type / final call type (these are subjective - based on the caller, we should note that
#final call type does not change based on ambulance crew (always based on the caller))
unique(ems$initial_call_type)
unique(ems$final_call_type)
# initial severity level code
unique(ems$initial_severity_level_code)
unique(ems$final_severity_level_code)
# VALID_DISPATCH_RSPNS_TIME_INDC
ems$valid_dispatch_rspns_time_indc
# VALID_DISPATCH_RSPNS_TIME_INDC
unique(ems$valid_dispatch_rspns_time_indc)
unique(ems$dispatch_response_seconds_qy)
str(unique(ems$dispatch_response_seconds_qy))
head(ems$dispatch_response_seconds_qy)
head(ems$dispatch_response_seconds_qy,100)
# VALID_INCIDENT_RSPNS_TIME_INDC / INCIDENT_RESPONSE_SECONDS_QY
unique(ems$valid_incident_rspns_time_indc)
str(ems$incident_response_seconds_qy)
# INCIDENT_TRAVEL_TM_SECONDS_QY
str(ems$incident_travel_tm_seconds_qy)
# HELD_INDICATOR
str(ems$held_indicator)
unique(ems$incident_disposition_code)
# atom
unique(ems$atom)
table(ems$atom)
# incident dispatch area
unique(ems$incident_dispatch_area)
unique(ems$borough)
table(ems$incident_dispatch_area)
# found good webiste that breaks it down to precincts / fire battalions
# S1 - links to 120 precinct
# S2 - links to 122 precinct
# S3 - links to 123 precinct
table(ems$incident_dispatch_area)
table(ems$policeprecinct)
ems <- filter(ems, incident_dispatch_area %in% c("S1", "S2", "S3"))
# found good webiste that breaks it down to precincts / fire battalions
# S1 - links to 120 precinct
# S2 - links to 122 precinct
# S3 - links to 123 precinct
table(ems$incident_dispatch_area) # some fall out of SI we should filter these out
table(ems$policeprecinct) # some fall out
str(ems$policeprecinct)
ems <- filter(ems, policeprecinct %in% c(120,121,122,123))
table(ems$policeprecinct) # some fall out
str(ems)
# revisit incident disposition code
unique(ems$incident_disposition_code)
unique(ems$incident_disposition_code)
str(ems$incident_disposition_code)
ems <- filter(ems, ems$incident_disposition_code != 87)
names(ems)
ems.drugs <- filter(ems, initial_call_type %in% c("DRUG", "DRUGFC") | final_call_type %in% c("DRUG", "DRUGFC"))
View(ems.drugs)
unique(ems.drugs$reopen_indicator)
table(ems.drugs$reopen_indicator)
lubridate::year(ems$incident_datetime)
ems <- read.csv("data/ems_original.csv")
ems <- ems[-1]
# CLEANING
str(ems)
#change borough to SI
ems$borough <- as.character(ems$borough)
ems$borough <- "SI"
# ems add a year column, based off incident year
ems$year <- lubridate::year(ems$incident_datetime)
#see if incident id is completely unique
length(unique(ems$cad_incident_id)) == nrow(ems) # each incident is truly unique
#clean datetime variables - remove characters and convert to date,hms
# create function
cleandt <- function(x){
x <- stringr::str_replace_all(string = x, pattern = 'T', replacement = " ")
x <- lubridate::ymd_hms(x)
return(x)
}
# apply to columns ending with date time
ems <- ems %>%
mutate_at(vars(ends_with("datetime")), list(cleandt))
#check incident range
range(ems$incident_datetime) #we have from Jan 1, 2013 to Dec 31, 2018 (# 4 years of data)
# initial call type / final call type (these are subjective - based on the caller, we should note that
#final call type does not change based on ambulance crew (always based on the caller))
unique(ems$initial_call_type)
unique(ems$final_call_type)
# initial/ final severity level code
unique(ems$initial_severity_level_code)
unique(ems$final_severity_level_code)
# VALID_DISPATCH_RSPNS_TIME_INDC / DISPATCH_RESPONSE_SECONDS_QY
unique(ems$valid_dispatch_rspns_time_indc)
str(ems$dispatch_response_seconds_qy)
# VALID_INCIDENT_RSPNS_TIME_INDC / INCIDENT_RESPONSE_SECONDS_QY
unique(ems$valid_incident_rspns_time_indc)
str(ems$incident_response_seconds_qy)
# INCIDENT_TRAVEL_TM_SECONDS_QY
str(ems$incident_travel_tm_seconds_qy)
# HELD_INDICATOR
str(ems$held_indicator)
# INCIDENT_DISPOSITION_CODE
# 82	transporting patient
# 83	patient pronounced dead
# 87	cancelled
# 90	unfounded
# 91	condition corrected
# 92	treated not transported
# 93	refused medical aid
# 94	treated and transported
# 95	triaged at scene no transport
# 96	patient gone on arrival
# CANCEL	cancelled
# DUP	duplicate incident
# NOTSNT	unit not sent
# ZZZZZZ	no disposition
unique(ems$incident_disposition_code)
ems <- filter(ems, ems$incident_disposition_code != 87) # filter out cancelled EMS dispatches
# atom
unique(ems$atom)
table(ems$atom)
# incident dispatch area / police precints
unique(ems$incident_dispatch_area)
table(ems$incident_dispatch_area) # it appears that some incident dispatch areas are outside SI, if I am assessing
# this properly
# found good webiste that breaks it down to precincts / fire battalions
# S1 - links to 120 precinct
# S2 - links to 122 precinct
# S3 - links to 123 precinct
table(ems$incident_dispatch_area) # some fall out of SI we should filter these out
table(ems$policeprecinct) # some fall out
ems <- filter(ems, incident_dispatch_area %in% c("S1", "S2", "S3")) #filter only on SI dispatch area
ems <- filter(ems, policeprecinct %in% c(120,121,122,123)) #filter only on SI police precincts
# CALL TYPE DESCRIPTIONS
# DRUG - DRUG ALCOHOL ABUSE
# DRUGFC - DRUG ALCOHOL ABUSE, FEVER + COUGH
ems.drugs <- filter(ems, initial_call_type %in% c("DRUG", "DRUGFC") | final_call_type %in% c("DRUG", "DRUGFC"))
View(ems.drugs)
# one last thing check initial call type versus final call type
ems.drugs %>%
select(initial_call_type, final_call_type) %>%
head()
# one last thing check initial call type versus final call type
chk <- ems.drugs %>%
select(initial_call_type, final_call_type)
View(chk)
sum(chk$initial_call_type == chk$final_call_type)
chk$initial_call_type == chk$final_call_type
str(chk$initial_call_type)
chk <- as.character(chk$initial_call_type)
# one last thing check initial call type versus final call type
chk <- ems.drugs %>%
select(initial_call_type, final_call_type)
chk <- as.character(chk$final_call_type)
chk <- ems.drugs %>%
select(initial_call_type, final_call_type)
chk$initial_call_type <- as.character(chk$initial_call_type)
chk <- ems.drugs %>%
select(initial_call_type, final_call_type)
chk$initial_call_type <- as.character(chk$initial_call_type)
chk$final_call_type <- as.character(chk$final_call_type)
View(chk)
chk$initial_call_type == chk$final_call_type
sum(chk$initial_call_type == chk$final_call_type)
chk %>%
mutate(indic = case_when(
initial_call_type == final_call_type ~ "No Drop",
!initial_call_type %in% c("DRUG", "DRUGFC") & final_call_type %in% c("DRUG", "DRUGFC") ~ "No Drop",
initial_call_type  %in% c("DRUG", "DRUGFC") & !final_call_type %in% c("DRUG", "DRUGFC") ~ "Drop"
))
chk <- chk %>%
mutate(indic = case_when(
initial_call_type == final_call_type ~ "No Drop",
!initial_call_type %in% c("DRUG", "DRUGFC") & final_call_type %in% c("DRUG", "DRUGFC") ~ "No Drop",
initial_call_type  %in% c("DRUG", "DRUGFC") & !final_call_type %in% c("DRUG", "DRUGFC") ~ "Drop"
))
View(chk)
str(ems.drugs)
# one last thing check initial call type versus final call type, I will create indicator variable decide on
# if we drop them later
ems.drugs <- ems.drugs %>%
select(initial_call_type, final_call_type) %>%
mutate(initial_call_type = as.character(initial_call_type)) %>%
mutate(final_call_type = as.character(final_call_type)) %>%
mutate(indic = case_when(
initial_call_type == final_call_type ~ "No Drop",
!initial_call_type %in% c("DRUG", "DRUGFC") & final_call_type %in% c("DRUG", "DRUGFC") ~ "No Drop",
initial_call_type  %in% c("DRUG", "DRUGFC") & !final_call_type %in% c("DRUG", "DRUGFC") ~ "Drop"
))
View(ems.drugs)
# upload
ems <- read.csv("data/ems_original.csv")
ems <- ems[-1]
# CLEANING
str(ems)
#change borough to SI
ems$borough <- as.character(ems$borough)
ems$borough <- "SI"
# ems add a year column, based off incident year
ems$year <- lubridate::year(ems$incident_datetime)
#see if incident id is completely unique
length(unique(ems$cad_incident_id)) == nrow(ems) # each incident is truly unique
#clean datetime variables - remove characters and convert to date,hms
# create function
cleandt <- function(x){
x <- stringr::str_replace_all(string = x, pattern = 'T', replacement = " ")
x <- lubridate::ymd_hms(x)
return(x)
}
# apply to columns ending with date time
ems <- ems %>%
mutate_at(vars(ends_with("datetime")), list(cleandt))
#check incident range
range(ems$incident_datetime) #we have from Jan 1, 2013 to Dec 31, 2018 (# 4 years of data)
# initial call type / final call type (these are subjective - based on the caller, we should note that
#final call type does not change based on ambulance crew (always based on the caller))
unique(ems$initial_call_type)
unique(ems$final_call_type)
# initial/ final severity level code
unique(ems$initial_severity_level_code)
unique(ems$final_severity_level_code)
# VALID_DISPATCH_RSPNS_TIME_INDC / DISPATCH_RESPONSE_SECONDS_QY
unique(ems$valid_dispatch_rspns_time_indc)
str(ems$dispatch_response_seconds_qy)
# VALID_INCIDENT_RSPNS_TIME_INDC / INCIDENT_RESPONSE_SECONDS_QY
unique(ems$valid_incident_rspns_time_indc)
str(ems$incident_response_seconds_qy)
# INCIDENT_TRAVEL_TM_SECONDS_QY
str(ems$incident_travel_tm_seconds_qy)
# HELD_INDICATOR
str(ems$held_indicator)
# INCIDENT_DISPOSITION_CODE
# 82	transporting patient
# 83	patient pronounced dead
# 87	cancelled
# 90	unfounded
# 91	condition corrected
# 92	treated not transported
# 93	refused medical aid
# 94	treated and transported
# 95	triaged at scene no transport
# 96	patient gone on arrival
# CANCEL	cancelled
# DUP	duplicate incident
# NOTSNT	unit not sent
# ZZZZZZ	no disposition
unique(ems$incident_disposition_code)
ems <- filter(ems, ems$incident_disposition_code != 87) # filter out cancelled EMS dispatches
# atom
unique(ems$atom)
table(ems$atom)
# incident dispatch area / police precints
unique(ems$incident_dispatch_area)
table(ems$incident_dispatch_area) # it appears that some incident dispatch areas are outside SI, if I am assessing
# this properly
# found good webiste that breaks it down to precincts / fire battalions
# S1 - links to 120 precinct
# S2 - links to 122 precinct
# S3 - links to 123 precinct
table(ems$incident_dispatch_area) # some fall out of SI we should filter these out
table(ems$policeprecinct) # some fall out
ems <- filter(ems, incident_dispatch_area %in% c("S1", "S2", "S3")) #filter only on SI dispatch area
ems <- filter(ems, policeprecinct %in% c(120,121,122,123)) #filter only on SI police precincts
# CALL TYPE DESCRIPTIONS
# DRUG - DRUG ALCOHOL ABUSE
# DRUGFC - DRUG ALCOHOL ABUSE, FEVER + COUGH
ems.drugs <- filter(ems, initial_call_type %in% c("DRUG", "DRUGFC") | final_call_type %in% c("DRUG", "DRUGFC"))
# one last thing check initial call type versus final call type, I will create indicator variable decide on
# if we drop them later
ems.drugs <- ems.drugs %>%
mutate(initial_call_type = as.character(initial_call_type)) %>%
mutate(final_call_type = as.character(final_call_type)) %>%
mutate(indic = case_when(
initial_call_type == final_call_type ~ "No Drop",
!initial_call_type %in% c("DRUG", "DRUGFC") & final_call_type %in% c("DRUG", "DRUGFC") ~ "No Drop",
initial_call_type  %in% c("DRUG", "DRUGFC") & !final_call_type %in% c("DRUG", "DRUGFC") ~ "Drop"
))
rm(chk)
View(ems.drugs)
?write_csv
getwd()
write_csv(ems.drugs, path = "data", "emsdrugs.csv")
write_csv(ems.drugs, path = "data/", "emsdrugs.csv")
write_csv(ems.drugs, "emsdrugs.csv")
getwd()
rm(list=ls())
